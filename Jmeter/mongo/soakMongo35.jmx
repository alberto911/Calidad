<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <longProp name="ThreadGroup.start_time">1504596051000</longProp>
        <longProp name="ThreadGroup.end_time">1504596051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

collection.count();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Número de ciudades</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

BasicDBObject idFields = new BasicDBObject(&quot;city&quot;, &apos;$city&apos;);
idFields.put(&quot;state&quot;, &apos;$state&apos;);
BasicDBObject groupFields = new BasicDBObject(&quot;_id&quot;, idFields);
BasicDBObject group = new BasicDBObject(&apos;$group&apos;, groupFields);

BasicDBObject count = new BasicDBObject(&apos;$count&apos;, &quot;cities&quot;);
AggregationOutput aggregation = collection.aggregate(group, count);

aggregation.results();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Número de ciudades diferentes</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

BasicDBObject matchFields = new BasicDBObject(&quot;city&quot;, java.util.regex.Pattern.compile(&apos;^N&apos;));
BasicDBObject match = new BasicDBObject(&apos;$match&apos;, matchFields);

BasicDBObject idFields = new BasicDBObject(&quot;city&quot;, &apos;$city&apos;);
idFields.put(&quot;state&quot;, &apos;$state&apos;);
BasicDBObject groupFields = new BasicDBObject(&quot;_id&quot;, idFields);
BasicDBObject group = new BasicDBObject(&apos;$group&apos;, groupFields);

AggregationOutput aggregation = collection.aggregate(match, group);

aggregation.results();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Ciudades que inician con N</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

BasicDBObject query = new BasicDBObject();
BasicDBObject fields = new BasicDBObject(&quot;_id&quot;, &quot;1&quot;);
DBCursor cursor = collection.find(query, fields).sort(new BasicDBObject(&quot;_id&quot;, -1)).limit(1);
StringBuilder resultBuilder = new StringBuilder();

while (cursor.hasNext()) {
	DBObject result = cursor.next();
	resultBuilder.append(result.toString());
}

SampleResult.setResponseData(resultBuilder.toString());</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Código postal mayor</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

BasicDBObject query = new BasicDBObject();
BasicDBObject fields = new BasicDBObject(&quot;_id&quot;, &quot;1&quot;);
DBCursor cursor = collection.find(query, fields).sort(new BasicDBObject(&quot;_id&quot;, 1)).limit(1);
StringBuilder resultBuilder = new StringBuilder();

while (cursor.hasNext()) {
	DBObject result = cursor.next();
	resultBuilder.append(result.toString());
}

SampleResult.setResponseData(resultBuilder.toString());</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Código postal menor</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

BasicDBObject lengthFields = new BasicDBObject(&apos;$strLenCP&apos;, &apos;$city&apos;);
BasicDBObject projectFields = new BasicDBObject(&quot;city&quot;, 1);
projectFields.put(&quot;length&quot;, lengthFields);
BasicDBObject project = new BasicDBObject(&apos;$project&apos;, projectFields);

BasicDBObject sortFields = new BasicDBObject(&quot;length&quot;, -1);
BasicDBObject sort = new BasicDBObject(&apos;$sort&apos;, sortFields);

BasicDBObject limit = new BasicDBObject(&apos;$limit&apos;, 1);
AggregationOutput aggregation = collection.aggregate(project, sort, limit);

aggregation.results();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Ciudad con más letras</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*

MongoClient cli = new MongoClient(&quot;localhost&quot;, 27017);
DB db = cli.getDB(&quot;prueba&quot;);
DBCollection collection = db.getCollection(&quot;zips&quot;);

BasicDBObject matchFields = new BasicDBObject(&quot;city&quot;, java.util.regex.Pattern.compile(&apos;(.* .*){2,}&apos;));
BasicDBObject match = new BasicDBObject(&apos;$match&apos;, matchFields);

BasicDBObject groupFields = new BasicDBObject(&quot;_id&quot;, &apos;$city&apos;);
BasicDBObject group = new BasicDBObject(&apos;$group&apos;, groupFields);

BasicDBObject projectFields = new BasicDBObject(&quot;_id&quot;, 0);
projectFields.put(&quot;ciudad&quot;, &apos;$_id&apos;);
BasicDBObject project = new BasicDBObject(&apos;$project&apos;, projectFields);

AggregationOutput aggregation = collection.aggregate(match, group, project);

aggregation.results();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Ciudades con más de dos palabras</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
